
#include "pa10.h"
#include "tree.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TRUE 1
#define FALSE 0


Stack * Stack_create();
void Stack_destroy(Stack * stack);
int Stack_isEmpty(Stack * stack);
int Stack_pop(Stack * stack);
void Stack_push(Stack * stack, int value);

// ----------------------------------- Stack Sort...
void stackSort(int * array, int len);
int max_value(int *array, int len) ;
int min_value(int *array, int len) ;

// ----------------------------------- Generating 
int isStackSortable(int * array, int len);
void genShapes(int n);
void swap ( int * a , int * b ) ;
void permuteHelper ( int * array , int len , int ind ) ;
void permute ( int * array , int len ) ;



/**
 * Returns a pointer to a new empty stack.
 */
Stack * Stack_create()
{
  Stack * tube = malloc(sizeof(Stack)) ;
  tube->list = NULL ;
    return tube;
}

/**
 * Frees all memory associated with the stack. 
 * Don't forget that you _must_ free the entire contained linked-list.
 * Also, you must safely to _nothing_ if stack == NULL. 
 */
void Stack_destroy(Stack * stack)
{
  if(stack != NULL)
    {

      while(stack->list != NULL )
	{
	  ListNode * ln = stack->list->next ;
	  free(stack->list) ;
	  stack->list = ln ;
	}

      free(stack) ;
    }
}

/**
 * Returns TRUE (something other than zero) if the stack is empty.
 */
int Stack_isEmpty(Stack * stack)
{
  if(stack == NULL || stack->list == NULL)
    {
      return TRUE ;
    }
    return FALSE;
}

/**
 * Pop the front 'value' from the stack.
 *
 * More precisely, this function must do two things:
 * (1) Return the value of the head node of the stack's list
 * (2) Remove the head node of the stack's list, freeing it.
 */
int Stack_pop(Stack * stack)
{
  if(stack->list == NULL)
    {
      return -1;
    }

  ListNode * down = stack->list->next ;
  int val = stack->list->value ;
  // free(tube->node) ;
  free(stack->list) ;

  stack->list = down ;

    return val;
}

/**
 * Push an 'value' onto the front of the stack.
 *
 * More precisely, this function must:
 * (1) Create a new ListNode with 'value' for it's value.
 * (2) Push that new ListNode onto the front of the stack's list.
 */
void Stack_push(Stack * stack, int value)
{

  ListNode * ln = malloc(sizeof(ListNode)) ;
  ln->value = value ;

  if(stack->list != NULL )
    {
      ln->next = stack->list  ;
    }
  else
    {
      ln->next = NULL ;
    }
  stack->list = ln ;

}

/**
 * Sort 'array' of length 'len' using Donald Knuth's "StackSort"
 *
 * To do this, you must implement the following pseudo-code:
 * (1) Maintain a 'write_index'. This is where you'll write values to
 *     as you sort them. It starts off as zero.
 * (2) Initialize an empty stack
 * (3) For each input value 'x':
 *     (3.a) While the stack is nonempty and 'x' is larger than the 
 *           front 'value' on the stack, pop 'value' and:
 *           (3.a.i) Write 'value' to array[write_index], and 
 *                   increment write_index.
 *     (3.b) Push x onto the stack.
 * (4) While the stack is nonempty, pop the front 'value' and follow
 *     step (3.a.i).
 *
 * The output should be a sorted array if, and only if, the array
 * is stack-sortable. You can find files full of stack-sortable and
 * stack-unsortable arrays in the 'expected' folder.
 */
void stackSort(int * array, int len)
{
  int windex = 0;
  int readindex = 0;

  Stack * tube  = Stack_create() ;

  while(readindex < len)
    {
       /* ListNode *lb  = malloc(sizeof(ListNode)) ; */
       /* lb->value = array[readindex] ; */
       /* lb->next = NULL ; */

      if( tube->list == NULL )
	{
	  Stack_push(tube,array[readindex]) ;
	  /* tube->list = malloc(sizeof(ListNode))  ; */
	  /* tube->list->value = array[readindex] ; */
	  /* tube->list->next = NULL ; */
	}
      else
	{
	  while(tube->list != NULL && tube->list->value < array[readindex])
	    {

	      array[windex] = Stack_pop(tube) ;
	      windex ++ ;
	    }
	  Stack_push(tube , array[readindex]) ;
	}
      readindex ++ ;
     
    }

  while(tube->list != NULL)
    {
      array[windex] = Stack_pop(tube) ;
      windex ++ ;
    }
  Stack_destroy(tube) ;	  
}

/**
 * Return TRUE (1) if the 'array' of length 'len' is stack-sortable.
 *
 * To do this you must:
 * (1) If 'len' is less than 3, return TRUE.
 * (2) Find the maximum value in 'array'.
 * (3) Partition array into two parts: left of max, and right of max.
 * (4) The maximum value in left must be smaller than the minimum
 *     value in right. (Otherwise return FALSE.)
 * (5) Return TRUE if both left and right are stack-sortable.
 *
 * The 'expected' directory contains files for all sortable and 
 * unsortable sequences of length len. You must return TRUE for every
 * sequence in the sortable files, and you must return FALSE for every
 * sequence in the unsortable files.
 */
int isStackSortable(int * array, int len)
{
  if(len < 3)
    { 
      return TRUE ;
    }
  int max_index = max_value(array, len) ;
  int left_max ;
  int right_min ;
  if(max_index == 0)
    {
      left_max = 0 ;
      right_min = array[min_value(array+1,len-1) + 1] ;
      if(left_max > right_min)
	{
	  return FALSE ;
	}
      return isStackSortable(array+1, len-1) ;
    }
  if(max_index == (len-1) )
    {
      left_max = array[max_value(array,len-1)];
      right_min = array[len-1] ;
      if(left_max > right_min)
	{
	  return FALSE ;
	}
      return isStackSortable(array, len-1) ;
    }

  left_max = array[max_value(array,max_index)] ;
  right_min = array[min_value(array+max_index+1,(len -max_index - 1) )+ max_index+1] ;
  if(left_max > right_min) 
    {
      return FALSE ;
    }
  return isStackSortable(array,max_index) ;
  return isStackSortable(array+max_index+1,(len-max_index-1)) ;
    
}
/*******************************************
 *To find the max value index in the array
 ******************************************/
int max_value(int *array, int len)
{
  int i ;
  int max = array[0]; 
  int max_index = 0 ;
  for(i = 1 ; i < len ; i ++ )
    {
      if( array[i] > max)
	{ 
	  max = array[i] ;
	  max_index = i ;
	}
    }
  return max_index ;
}

/******************************************
 *To find the min value index in the array
 ******************************************/
int min_value(int *array, int len)
{
  int i ;
  int min = array[0]; 
  int min_index = 0 ;
  for(i = 1 ; i < len ; i ++ )
    {
      if( array[i] < min)
	{ 
	  min = array[i] ;
	  min_index = i ;
	}
    }
  return min_index ;
}


/**
 * Generates (and prints) all the unique binary tree shapes of size k
 *
 * To do this, you must:
 * (1) Create an array with the elements [0..k-1] inclusive.
 * (2) Find all the permutations of this array.
 * (3) In the base-case of your permute function, you must test if the
 *     permutation is "stack-sortable"
 * (4) If the permutation is "stack-sortable", then build a binary
 *     tree, and print it using the "Tree_printShape(...)" function.
 *
 * Your genShapes() function must NOT produce duplicate tree shapes.
 * The correct outputs for sizes [1..9] are in the 'expected' 
 * directory.
 */

void genShapes(int k)
{

  int * array = malloc(sizeof(int)*k) ;
  int i ;

  for(i = 0 ; i < k ; i ++)
    {
      array[i] = i ;
   }
  permute ( array , k ) ;
  free(array) ;

}



/* static void printPermutation ( int * array , int len ) */
/* { */
/*   int ind ; */
/*   for ( ind = 0; ind < len ; ind ++) */
/*   { */
/*     printf ("% d " , array [ ind ]); */
/*   } */
/*   printf ("\n "); */
/* } */


/******************************************
 *Swaps two values
 ******************************************/

void swap ( int * a , int * b )
 {
   int t = * a ;
   * a = * b ;
   * b = t ;
 }
 
/******************************************
 * To find stack sortable permutations,
 * insert them in a binary tree and 
 * print it out
 ******************************************/

void permuteHelper ( int * array , int len , int ind )
 {

   //   TreeNode * root = NULL ;
   int check ;
   if ( ind == len )
   {
     check = isStackSortable( array, len) ;
     if(check == 1)
       {
	 TreeNode * root = Tree_build(array, len) ;
	 Tree_printShape(root) ;
	 // printPermutation ( array , len );
	 Tree_destroy(root) ;
       }
   }
 int pos ;
 for ( pos = ind ; pos < len ; pos ++)
   {
   swap (& array [ pos ] , & array [ ind ]); 
   permuteHelper ( array , len , ind + 1);
   swap (& array [ pos ] , & array [ ind ]); 
   }



 }

/******************************************
 *To find the permutations
 ******************************************/
 
 void permute ( int * array , int len )
 {
   permuteHelper ( array , len , 0);
 }



/* #ifndef MYTEST */

/* int main ( int argc , char * * argv ) */
/* { */
/*   /\* int set [3] = {1,2,3}; *\/ */
/*   /\* permute ( set , 3 ); *\/ */
/*   genShapes(4) ; */
/*   return EXIT_SUCCESS ; */
/* } */

/* #endif */
